{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Build%20cURL%20on%20Android/","title":"Build cURL on Android","text":"<p>It is posible to build cURL on Android? Yes but limited.. </p>"},{"location":"Build%20cURL%20on%20Android/#requirements","title":"Requirements","text":"<ul> <li>Any method to get the tar file</li> <li>Systemless Mkshrc</li> <li>GCC Toolchain</li> </ul>"},{"location":"Build%20cURL%20on%20Android/#building","title":"Building","text":"<pre><code>xh -d https://curl.se/download/curl-7.87.0.tar.gz\n</code></pre> <p>Then you'll need to run <code>configure</code></p> <pre><code>./configure --host aarch64-linux-android --with-pic --disable-shared --without-ssl --prefix=$PREFIX\n</code></pre> <p>Adjustments to the features and protocols</p> <pre><code>  Host setup:       aarch64-unknown-linux-android\n  Install prefix:   /data/chuser/&lt;USER&gt;/usr\n  Compiler:         aarch64-linux-android-gcc\n   CFLAGS:          -pie -Werror-implicit-function-declaration -O2 -Wno-system-headers\n   CPPFLAGS:\n   LDFLAGS:\n   LIBS:            -lz\n\n  curl version:     7.87.0\n  SSL:              no      (--with-{openssl,gnutls,nss,mbedtls,wolfssl,schannel,secure-transport,amissl,bearssl,rustls} )\n  SSH:              no      (--with-{libssh,libssh2})\n  zlib:             enabled\n  brotli:           no      (--with-brotli)\n  zstd:             no      (--with-zstd)\n  GSS-API:          no      (--with-gssapi)\n  GSASL:            no      (libgsasl not found)\n  TLS-SRP:          no      (--enable-tls-srp)\n  resolver:         POSIX threaded\n  IPv6:             enabled\n  Unix sockets:     enabled\n  IDN:              no      (--with-{libidn2,winidn})\n  Build libcurl:    Shared=no, Static=yes\n  Built-in manual:  no      (--enable-manual)\n  --libcurl option: enabled (--disable-libcurl-option)\n  Verbose errors:   enabled (--disable-verbose)\n  Code coverage:    disabled\n  SSPI:             no      (--enable-sspi)\n  ca cert bundle:   no\n  ca cert path:\n  ca fallback:\n  LDAP:             no      (--enable-ldap / --with-ldap-lib / --with-lber-lib)\n  LDAPS:            no      (--enable-ldaps)\n  RTSP:             enabled\n  RTMP:             no      (--with-librtmp)\n  PSL:              no      (libpsl not found)\n  Alt-svc:          enabled (--disable-alt-svc)\n  Headers API:      enabled (--disable-headers-api)\n  HSTS:             no      (--enable-hsts)\n  HTTP1:            enabled (internal)\n  HTTP2:            no      (--with-nghttp2, --with-hyper)\n  HTTP3:            no      (--with-ngtcp2, --with-quiche --with-msh3)\n  ECH:              no      (--enable-ech)\n  WebSockets:       no      (--enable-websockets)\n  Protocols:        DICT FILE FTP GOPHER HTTP IMAP MQTT POP3 RTSP SMTP TELNET TFTP\n  Features:         AsynchDNS IPv6 Largefile UnixSockets alt-svc libz threadsafe\n</code></pre> <p>Check if it's working</p> <pre><code>$PREFIX/local/bin/curl --version\n</code></pre>"},{"location":"MMRL/Configure%20Samples/activitys/","title":"Open a new activity","text":"<p>Internal activitys currently aren't shared. You should always define a activity key.</p> <p><code>ActivityExample</code> is as the main declared, for main activitys you currently don't need a toolbar</p> <pre><code>import React from \"react\";\nimport { Page, Toolbar } from \"@mmrl/ui\";\nimport { Button, ListItem, ListItemIcon } from '@mui/material';\nimport { CloudUpload, Folder } from '@mui/icons-material';\nimport { useActivity } from \"@mmrl/hooks\";\n\nfunction PickerActivity() {\n  const { context, extra } = useActivity();\n\n  const renderToolbar = () =&gt; {\n    return (\n      &lt;Toolbar modifier=\"noshadow\"&gt;\n        &lt;Toolbar.Left&gt;\n          &lt;Toolbar.BackButton onClick={context.popPage} /&gt;\n        &lt;/Toolbar.Left&gt;\n        &lt;Toolbar.Center&gt;{extra.title}&lt;/Toolbar.Center&gt;\n      &lt;/Toolbar&gt;\n    );\n  };\n\n  return (\n    &lt;Page renderToolbar={renderToolbar}&gt;\n      &lt;List&gt;\n        {Array.from(Array(10).keys()).map((k) =&gt; (\n          &lt;ListItem&gt;\n            &lt;ListItemIcon&gt;\n              &lt;Folder /&gt;\n            &lt;/ListItemIcon&gt;\n            &lt;ListItemText primary={`File ${k}`} /&gt;\n          &lt;/ListItem&gt;\n        ))}\n      &lt;/List&gt;\n    &lt;/Page&gt;\n  )\n}\n\nfunction ActivityExample() {\n  const { context } = useActivity();\n\n  const handleOpenFilePicker = () =&gt; {\n    context.pushPage({\n      component: PickerActivity,\n      key: \"YouShouldDefineAKey\",\n      extra: {\n        title: \"Pick a file\"\n      }\n    })\n  }\n\n  return (\n    &lt;Page&gt;\n      &lt;Button variant=\"contained\" startIcon={&lt;CloudUpload /&gt;} onClick={handleOpenFilePicker}&gt;\n        Upload file\n      &lt;/Button&gt;\n    &lt;/Page&gt;\n  )\n}\n\nexport default ActivityExample;\n</code></pre>"},{"location":"MMRL/Configure%20Samples/translations/","title":"Translations","text":"<p>Current selected language depends on the current selected language in MMRL</p> <pre><code>import React from \"react\";\nimport { Page } from \"@mmrl/ui\";\nimport { StringsProvider } from \"@mmrl/providers\";\nimport { useStrings } from \"@mmrl/hooks\";\n\nconst strs = {\n  en: {\n    hello: \"Hello\"\n  },\n  de: {\n    hello: \"Hallo\"\n  }\n}\n\n\nconst Config = () =&gt; {\n  const { strings } = useStrings();\n  return (\n    &lt;Page&gt;{strings(\"hello\")}&lt;/Page&gt;\n  )\n}\n\nconst Main = () =&gt; {\n  return (\n    &lt;StringsProvider data={strs}&gt;\n      &lt;Config /&gt;\n    &lt;/StringsProvider&gt;\n  )\n}\n\nexport default Main\n</code></pre>"},{"location":"Node.js%20for%20Android/","title":"Node.js for Android","text":"<p>Test</p>"}]}